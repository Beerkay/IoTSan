public class GoodNight extends java.lang.Object
{
    static int STCurrentSystemTime;
    static STNetworkManager _STNetworkManager;
    static STLocation location;
    static STApp GoodNight_app;
    static STMotionSensor[] GoodNight_motionSensors;
    static int GoodNight_minutes;
    static int GoodNight_timeOfDay;
    static STSwitch[] GoodNight_switches;
    static int GoodNight_newMode;
    static int GoodNight_recipients;
    static int GoodNight_sendPushMessage;
    static int GoodNight_phoneNumber;
    static int GoodNight_modeStartTime;
    static STEvent evt;

    static int now()
    {
        int $ret, _static_STCurrentSystemTime;

        $ret = _static_STCurrentSystemTime * 3600000;
        return $ret;
    }

    static void increaseSTSystemTime(int)
    {
        int amount, h, JJJCTEMP$3, JJJCTEMP$2, JJJCTEMP$0;

        amount := @parameter0;
        JJJCTEMP$0 = amount / 3600;
        h = JJJCTEMP$0 + 1;
        JJJCTEMP$2 = [GoodNight.STCurrentSystemTime:int];
        JJJCTEMP$3 = JJJCTEMP$2 + h;
        [GoodNight.STCurrentSystemTime:int] = JJJCTEMP$3;
        return;
    }

    static int timeTodayAfter(int[], int, int)
    {
        int[] startTimeString;
        int timeZone, timeString, $ret;

        startTimeString := @parameter0;
        timeString := @parameter1;
        timeZone := @parameter2;
        $ret = timeString * 3600000;
        return $ret;
    }

    static int timeTodayAfter(int[], int[])
    {
        int[] timeString, startTimeString;
        int $ret;

        startTimeString := @parameter0;
        timeString := @parameter1;
        $ret = timeString * 3600000;
        return $ret;
    }

    static int timeTodayAfter(int, int, int)
    {
        int timeZone, startTime, $ret, timeVal;

        startTime := @parameter0;
        timeVal := @parameter1;
        timeZone := @parameter2;
        $ret = timeVal * 3600000;
        return $ret;
    }

    static int timeTodayAfter(int, int)
    {
        int startTime, $ret, timeVal;

        startTime := @parameter0;
        timeVal := @parameter1;
        $ret = timeVal * 3600000;
        return $ret;
    }

    static int timeToday(int, int)
    {
        int timeZone, startTime, $ret;

        startTime := @parameter0;
        timeZone := @parameter1;
        $ret = startTime;
        return $ret;
    }

    static int timeToday(int)
    {
        int startTime, $ret;

        startTime := @parameter0;
        $ret = startTime;
        return $ret;
    }

    static void setLocationMode(int)
    {
        STLocation _static_location;
        int mode;

        mode := @parameter0;
        if mode != 1400 goto label0;

        _static_location.[STLocation.STCommand_Location_Home:boolean] = 1;
        goto label2;

     label0:
        if mode != 1401 goto label1;

        _static_location.[STLocation.STCommand_Location_Away:boolean] = 1;
        goto label2;

     label1:
        if mode != 1402 goto label2;

        _static_location.[STLocation.STCommand_Location_Night:boolean] = 1;

     label2:
        return;
    }

    static void setLocationMode(STMode)
    {
        STMode JJJCTEMP$6, JJJCTEMP$3, JJJCTEMP$0, mode;
        STLocation _static_location;
        int JJJCTEMP$4, JJJCTEMP$1, JJJCTEMP$7;

        mode := @parameter0;
        JJJCTEMP$0 = mode;
        JJJCTEMP$1 = JJJCTEMP$0.[STMode.name:int];
        if JJJCTEMP$1 != 1400 goto label0;

        _static_location.[STLocation.STCommand_Location_Home:boolean] = 1;
        goto label2;

     label0:
        JJJCTEMP$3 = mode;
        JJJCTEMP$4 = JJJCTEMP$3.[STMode.name:int];
        if JJJCTEMP$4 != 1401 goto label1;

        _static_location.[STLocation.STCommand_Location_Away:boolean] = 1;
        goto label2;

     label1:
        JJJCTEMP$6 = mode;
        JJJCTEMP$7 = JJJCTEMP$6.[STMode.name:int];
        if JJJCTEMP$7 != 1402 goto label2;

        _static_location.[STLocation.STCommand_Location_Night:boolean] = 1;

     label2:
        return;
    }

    STSunriseSunset getSunriseAndSunset()
    {
        GoodNight JJJCTEMP$0;
        STLocation _static_location;
        STSunriseSunset _static_location.sunriseSunset, $ret;

        JJJCTEMP$0 := @this;
        $ret = _static_location.sunriseSunset;
        return $ret;
    }

    public STWeatherFeature getWeatherFeature(int)
    {
        GoodNight JJJCTEMP$0;
        int feature;
        STLocation _static_location;
        STWeatherFeature $ret, _static_location.weatherFeature;

        JJJCTEMP$0 := @this;
        feature := @parameter0;
        $ret = _static_location.weatherFeature;
        return $ret;
    }

    public STWeatherFeature getWeatherFeature(int, int)
    {
        GoodNight JJJCTEMP$0;
        int feature, zipcode;
        STLocation _static_location;
        STWeatherFeature $ret, _static_location.weatherFeature;

        JJJCTEMP$0 := @this;
        feature := @parameter0;
        zipcode := @parameter1;
        $ret = _static_location.weatherFeature;
        return $ret;
    }

    static void sendNotificationToContacts(int, int[])
    {
        int[] recipients;
        int msg;

        msg := @parameter0;
        recipients := @parameter1;
        return;
    }

    static void sendPush(int)
    {
        int msg;

        msg := @parameter0;
        return;
    }

    static void sendSms(int, int)
    {
        int phoneNumb, msg;
        STNetworkManager _static__STNetworkManager;

        phoneNumb := @parameter0;
        msg := @parameter1;
        _static__STNetworkManager.[STNetworkManager.receivedPhoneNumber:int] = phoneNumb;
        _static__STNetworkManager.[STNetworkManager.STCommand_sendSms:boolean] = 1;
        return;
    }

    static void httpPost()
    {
        STNetworkManager _static__STNetworkManager;

        _static__STNetworkManager.[STNetworkManager.STCommand_httpPost:boolean] = 1;
        return;
    }

    static void unsubscribe()
    {
        STNetworkManager _static__STNetworkManager;

        _static__STNetworkManager.[STNetworkManager.STCommand_unsubscribe:boolean] = 1;
        return;
    }

    public void scheduleCheck()
    {
        GoodNight JJJCTEMP$0;
        int JJJCTEMP$4, JJJCTEMP$3, JJJCTEMP$2, JJJCTEMP$1;

        JJJCTEMP$0 := @this;
        JJJCTEMP$1 = specialinvoke JJJCTEMP$0.[GoodNight.correctMode():boolean]();
        if JJJCTEMP$1 == 0 goto label0;

        JJJCTEMP$2 = specialinvoke JJJCTEMP$0.[GoodNight.correctTime():boolean]();
        if JJJCTEMP$2 == 0 goto label0;

        JJJCTEMP$3 = specialinvoke JJJCTEMP$0.[GoodNight.allQuiet():boolean]();
        if JJJCTEMP$3 == 0 goto label0;

        JJJCTEMP$4 = specialinvoke JJJCTEMP$0.[GoodNight.switchesOk():boolean]();
        if JJJCTEMP$4 == 0 goto label0;

        specialinvoke JJJCTEMP$0.[GoodNight.takeActions():void]();

     label0:
        return;
    }

    private boolean correctMode()
    {
        GoodNight JJJCTEMP$0;
        int $ret, _static_location.mode, _static_GoodNight_newMode;

        JJJCTEMP$0 := @this;
        if _static_location.mode == _static_GoodNight_newMode goto label0;

        $ret = 1;
        return $ret;

     label0:
        $ret = 0;
        return $ret;
    }

    private boolean correctTime()
    {
        GoodNight JJJCTEMP$0;
        int _static_GoodNight_timeOfDay, modeStartTime, $ret, startTime, t0, _static_location.timeZone;

        JJJCTEMP$0 := @this;
        t0 = staticinvoke [GoodNight.now():int]();
        modeStartTime = staticinvoke [GoodNight.now():int]();
        startTime = staticinvoke [GoodNight.timeTodayAfter(int,int,int):int](modeStartTime, _static_GoodNight_timeOfDay, _static_location.timeZone);
        if t0 < startTime goto label0;

        $ret = 1;
        return $ret;

     label0:
        $ret = 0;
        return $ret;
    }

    private boolean allQuiet()
    {
        STState sensor, JJJCTEMP$6, it$0, findResult1;
        GoodNight JJJCTEMP$0;
        int JJJCTEMP$9, JJJCTEMP$14, JJJCTEMP$13, elapsed, JJJCTEMP$12, JJJCTEMP$10, JJJCTEMP$3, JJJCTEMP$1, _static_GoodNight_minutes, $ret, index6, index5, threshold;
        STMotionSensor it;
        STState[] states, collectResult1;
        STMotionSensor[] _static_GoodNight_motionSensors;

        JJJCTEMP$0 := @this;
        JJJCTEMP$1 = 1000 * 60;
        JJJCTEMP$3 = JJJCTEMP$1 * _static_GoodNight_minutes;
        threshold = JJJCTEMP$3 - 1000;
        index5 = 0;
        goto label1;

     label0:
        it = _static_GoodNight_motionSensors[index5];
        JJJCTEMP$6 = virtualinvoke it.[STMotionSensor.currentState(int):STState](11);
        collectResult1[index5] = JJJCTEMP$6;
        index5 = index5 + 1;

     label1:
        JJJCTEMP$9 = lengthof _static_GoodNight_motionSensors;
        if index5 < JJJCTEMP$9 goto label0;

        states = collectResult1;
        if states == 0 goto label7;

        index6 = 0;
        goto label4;

     label2:
        it$0 = states[index6];
        JJJCTEMP$10 = it$0.[STState.value:int];
        if JJJCTEMP$10 != 12 goto label3;

        findResult1 = it$0;

     label3:
        index6 = index6 + 1;

     label4:
        JJJCTEMP$12 = lengthof states;
        if index6 < JJJCTEMP$12 goto label2;

        if findResult1 == 0 goto label5;

        $ret = 0;
        return $ret;

     label5:
        sensor = states[0];
        JJJCTEMP$13 = staticinvoke [GoodNight.now():int]();
        JJJCTEMP$14 = sensor.[STState.date:int];
        elapsed = JJJCTEMP$13 - JJJCTEMP$14;
        if elapsed < threshold goto label6;

        $ret = 1;
        return $ret;

     label6:
        $ret = 0;
        return $ret;

     label7:
        $ret = 1;
        return $ret;

        return;
    }

    private boolean switchesOk()
    {
        GoodNight JJJCTEMP$0;
        int JJJCTEMP$5, $ret, JJJCTEMP$2, index4, result;
        STSwitch[] _static_GoodNight_switches;
        STSwitch it;

        JJJCTEMP$0 := @this;
        goto label0;

     label0:
        result = 1;
        index4 = 0;
        goto label3;

     label1:
        it = _static_GoodNight_switches[index4];
        JJJCTEMP$2 = it.[STSwitch.currentSwitch:int];
        if JJJCTEMP$2 != 15 goto label2;

        result = 0;
        goto label4;

     label2:
        index4 = index4 + 1;

     label3:
        JJJCTEMP$5 = lengthof _static_GoodNight_switches;
        if index4 < JJJCTEMP$5 goto label1;

     label4:
        $ret = result;
        return $ret;
    }

    private void takeActions()
    {
        GoodNight JJJCTEMP$0;
        int _static_GoodNight_newMode;

        JJJCTEMP$0 := @this;
        staticinvoke [GoodNight.setLocationMode(int):void](_static_GoodNight_newMode);
        return;
    }

    public void installedEvtHandler()
    {
        GoodNight JJJCTEMP$0;

        JJJCTEMP$0 := @this;
        virtualinvoke JJJCTEMP$0.[GoodNight.createSubscriptions():void]();
        return;
    }

    public void createSubscriptions()
    {
        GoodNight JJJCTEMP$0;
        int _static_GoodNight_modeStartTime;

        JJJCTEMP$0 := @this;
        if _static_GoodNight_modeStartTime != 0 goto label0;

        [GoodNight.GoodNight_modeStartTime:int] = 0;

     label0:
        return;
    }

    public void motionActiveEvtHandler()
    {
        GoodNight JJJCTEMP$0;

        JJJCTEMP$0 := @this;
        return;
    }

    public void switchOffEvtHandler()
    {
        GoodNight JJJCTEMP$0;
        int JJJCTEMP$4, JJJCTEMP$3, JJJCTEMP$2, JJJCTEMP$1;

        JJJCTEMP$0 := @this;
        JJJCTEMP$1 = specialinvoke JJJCTEMP$0.[GoodNight.correctMode():boolean]();
        if JJJCTEMP$1 == 0 goto label0;

        JJJCTEMP$2 = specialinvoke JJJCTEMP$0.[GoodNight.correctTime():boolean]();
        if JJJCTEMP$2 == 0 goto label0;

        JJJCTEMP$3 = specialinvoke JJJCTEMP$0.[GoodNight.allQuiet():boolean]();
        if JJJCTEMP$3 == 0 goto label0;

        JJJCTEMP$4 = specialinvoke JJJCTEMP$0.[GoodNight.switchesOk():boolean]();
        if JJJCTEMP$4 == 0 goto label0;

        specialinvoke JJJCTEMP$0.[GoodNight.takeActions():void]();

     label0:
        return;
    }

    public void motionInactiveEvtHandler()
    {
        GoodNight JJJCTEMP$0;
        int _static_GoodNight_minutes, JJJCTEMP$5, JJJCTEMP$3, _static_GoodNight_modeStartTime, JJJCTEMP$2;

        JJJCTEMP$0 := @this;
        if _static_GoodNight_modeStartTime != 0 goto label0;

        [GoodNight.GoodNight_modeStartTime:int] = 0;

     label0:
        JJJCTEMP$2 = specialinvoke JJJCTEMP$0.[GoodNight.correctMode():boolean]();
        if JJJCTEMP$2 == 0 goto label1;

        JJJCTEMP$3 = specialinvoke JJJCTEMP$0.[GoodNight.correctTime():boolean]();
        if JJJCTEMP$3 == 0 goto label1;

        JJJCTEMP$5 = _static_GoodNight_minutes * 60;
        staticinvoke [GoodNight.increaseSTSystemTime(int):void](JJJCTEMP$5);
        virtualinvoke JJJCTEMP$0.[GoodNight.scheduleCheck():void]();

     label1:
        return;
    }

    public void modeChangeEvtHandler()
    {
        GoodNight JJJCTEMP$0;
        int JJJCTEMP$1;

        JJJCTEMP$0 := @this;
        JJJCTEMP$1 = staticinvoke [GoodNight.now():int]();
        [GoodNight.GoodNight_modeStartTime:int] = JJJCTEMP$1;
        return;
    }

    private void send(int)
    {
        GoodNight JJJCTEMP$0;
        int msg;

        JJJCTEMP$0 := @this;
        msg := @parameter0;
        return;
    }

    public void <init>()
    {
        GoodNight JJJCTEMP$0;

        JJJCTEMP$0 := @this;
        specialinvoke JJJCTEMP$0.[java.lang.Object.<init>():void]();
        return;
    }
}
